#!/usr/bin/env node
const express = require('express')
const { bootstrapService } = require('./../src/index')
const debug = require('debug')('node-app:server');
const http = require('http');

console.log('Starting app from node express folder')
let app = express()
const port = normalizePort(process.env.PORT || '3000');
// const port = 3000 + Math.floor(Math.random() * 100)
app.set('port', port);

const server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);
server.listen(port, async () => {
  await startBlueprint()
});

async function startBlueprint() {
  try {
    app = await bootstrapService(app, process.env.GENERATE_DOCS)
    console.log('Your app is apified.Ready to use on port %d', port)
    console.log('****************************************************************')
    if (process.env.GENERATE_DOCS) {
      killServer();
    }
  } catch (err) {
    console.log('App startup failed. Shutting down server')
    killServer();
  }
}

/**
 * Close server
 */

function killServer() {
  try {
    server.close(() => {
      process.exit(process.env.GENERATE_DOCS ? 0 : 1)
    })
  } catch (err) {
    console.log('Error in shutting down the server %s', err)
  }
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      /* eslint-disable */
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      /* eslint-enable */
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
